
service: products-api

plugins:
  - serverless-dynamodb-local
#  - serverless-plugin-offline-dynamodb-stream
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev
#  dynamodbStream:
#    host: localhost
#    port: 8000
#    pollForever: true
#    streams:
#      - table: ${self:provider.environment.PRODUCTS_TABLE_NAME}
#        functions:
#          - demoDynamoDbStreams
#    region: ${self:provider.region)


  documentation:
    api:
      info:
        version: v1.0.0
        title: products-api
    models:
      - name: productModel
        contentType: application/json
        schema: ${file(models/productModel.json)}

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ProductsDynamoDBTable", "Arn" ] }
  environment:
    PRODUCTS_TABLE_NAME: java-products-${self:provider.stage}
    PRODUCTS_GSI: java-products-index-${self:provider.stage}

package:
  individually: true
  artifact: 'target/${self:service}-${self:provider.stage}.jar'


functions:
  listProducts:
    handler: com.serverless.ListProductsHandler
    events:
      - http:
          path: /products
          method: get
  getProduct:
    handler: com.serverless.GetProductHandler
    events:
      - http:
          path: /products/{id}
          method: get
  createProduct:
    handler: com.serverless.CreateProductHandler
    events:
      - http:
          path: /products
          method: post
          reqValidatorName: RequestBodyValidator
          documentation:
            requestModels:
              application/json: productModel
  createProductCollection:
    handler: com.serverless.CreateProductCollectionHandler
    events:
      - http:
          path: /productCollection
          method: post
          reqValidatorName: RequestBodyValidator
  updateProduct:
    handler: com.serverless.UpdateProductHandler
    events:
      - http:
          path: /products
          method: put
          reqValidatorName: RequestBodyValidator
          documentation:
            requestModels:
              application/json: productModel
  deleteProduct:
    handler: com.serverless.DeleteProductHandler
    events:
      - http:
          path: /products/{id}
          method: delete
  demoDynamoDbStreams:
    handler: com.serverless.DemoDynamoDbStreamsHandler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SQS:SendMessage
        Resource:
          - !GetAtt ProductsDbStreamsErrorsQueue.Arn
    events:
      - stream:
          enabled: true
          type: dynamodb
          arn: !GetAtt ProductsDynamoDBTable.StreamArn
          tableName: ${self:provider.environment.PRODUCTS_TABLE_NAME}
          batchSize: 100
          startingPosition: LATEST # other option is : Trim horizon â€“ Process all records in the stream
          maximumRetryAttempts: 10
          batchWindow: 60 # in seconds
          parallelizationFactor: 1 # number of concurrent Lambda invocations for each shard of the Kinesis Stream
          destinations: # onFailure location for events to be sent to once it has reached the maximum number of times to retry when the function returns an error.
            onFailure: arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:ProductsDbStreamsErrorsQueue # has to be exact URL serverless will not let you use references to find this

resources:
  Resources:
    ProductsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PRODUCTS_GSI}
            KeySchema:
              - AttributeName: name
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'RequestBodyValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ProductsDbStreamsErrorsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "ProductsDbStreamsErrorsQueue"


    # we could have used destinations in functions directly to achieve this , but serverless requires exact URN there
    # Declaring it like this so that we can use !Gett to find out the ARN of queue
    # The config below would work if Lambda Source is asynchronous like SQS or SNS
#    DemoDynamoDbStreamsLambdaEnvConf:
#      Type: AWS::Lambda::EventInvokeConfig
#      Properties:
#        FunctionName: !Ref DemoDynamoDbStreamsLambdaFunction
#        Qualifier: "$LATEST"
#        MaximumEventAgeInSeconds: 600
#        MaximumRetryAttempts: 0
#        DestinationConfig:
#          OnFailure:
#            Destination: !GetAtt ProductsDbStreamsErrorsQueue.Arn

    # could have configured it along with streams event in lambda (under destination attribute),
    # but there is a limitation in serverless , where it requires you to specify
    # exact URN , just so that we could derive SQS ARN from its resource-declaration , we are using this
    # TODO if we use this instead of serverless-abstraction, then we need to explicitly assign stream permissions
#    DemoDynamoDbStreamsLambdaEventSourceMapping:
#      Type: AWS::Lambda::EventSourceMapping
#      Properties:
#        BatchSize: 100
#        Enabled: true
#        MaximumRetryAttempts: 0
#        ParallelizationFactor: 1
#        MaximumBatchingWindowInSeconds: 5
#        EventSourceArn: !GetAtt ProductsDynamoDBTable.StreamArn
#        FunctionName: !Ref DemoDynamoDbStreamsLambdaFunction
#        StartingPosition: LATEST
#        DestinationConfig:
#          OnFailure:
#            Destination: !GetAtt ProductsDbStreamsErrorsQueue.Arn

